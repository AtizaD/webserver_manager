#!/bin/bash

# Domain Manager Script for Ubuntu 22.04 with Nginx
# Version: 1.0
# Author: Domain Management System

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
NGINX_SITES_AVAILABLE='/etc/nginx/sites-available'
NGINX_SITES_ENABLED='/etc/nginx/sites-enabled'
WEB_ROOT='/var/www'
NGINX_USER='www-data'
LOG_FILE='/var/log/domain-manager.log'

# Functions for colored output
print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    echo "$(date): [SUCCESS] $1" >> "$LOG_FILE"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    echo "$(date): [ERROR] $1" >> "$LOG_FILE"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    echo "$(date): [WARNING] $1" >> "$LOG_FILE"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
    echo "$(date): [INFO] $1" >> "$LOG_FILE"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root"
        exit 1
    fi
}

# Detect web server
detect_webserver() {
    if command -v nginx > /dev/null 2>&1; then
        echo "nginx"
    elif command -v apache2 > /dev/null 2>&1; then
        echo "apache2"
    else
        print_error "No supported web server found (nginx or apache2)"
        exit 1
    fi
}

# Validate domain name
validate_domain() {
    local domain=$1
    if [[ ! $domain =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ ]]; then
        print_error "Invalid domain name: $domain"
        return 1
    fi
    return 0
}

# Test nginx configuration
test_nginx_config() {
    if ! nginx -t > /dev/null 2>&1; then
        print_error "Nginx configuration test failed"
        nginx -t
        return 1
    fi
    return 0
}

# Reload nginx safely
reload_nginx() {
    if test_nginx_config; then
        systemctl reload nginx
        print_success "Nginx reloaded successfully"
    else
        print_error "Cannot reload nginx due to configuration errors"
        return 1
    fi
}

# Create nginx config for domain
create_nginx_config() {
    local domain=$1
    local config_file="$NGINX_SITES_AVAILABLE/$domain"
    
    cat > "$config_file" << EOL
server {
    listen 80;
    listen [::]:80;
    server_name $domain www.$domain;
    root $WEB_ROOT/$domain;
    index index.html index.htm index.php;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    location / {
        try_files \$uri \$uri/ =404;
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
    }

    # PHP support (uncomment if needed)
    # location ~ \.php$ {
    #     include snippets/fastcgi-php.conf;
    #     fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
    # }

    # Static files caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Log files
    access_log /var/log/nginx/$domain.access.log;
    error_log /var/log/nginx/$domain.error.log;
}
EOL

    print_success "Created nginx configuration for $domain"
}

# Create web directory and sample files
create_web_directory() {
    local domain=$1
    local web_dir="$WEB_ROOT/$domain"
    
    mkdir -p "$web_dir"
    
    # Create sample index.html
    cat > "$web_dir/index.html" << EOL
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome to $domain</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        .success {
            color: #28a745;
            font-size: 18px;
        }
        .info {
            color: #666;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Welcome to $domain</h1>
        <p class="success">Your domain has been successfully configured!</p>
        <p class="info">This is a default page. Replace this file with your website content.</p>
        <p class="info">File location: $web_dir/index.html</p>
        <p class="info">Generated on: $(date)</p>
    </div>
</body>
</html>
EOL

    # Set proper permissions
    chown -R $NGINX_USER:$NGINX_USER "$web_dir"
    chmod -R 755 "$web_dir"
    
    print_success "Created web directory and sample index.html for $domain"
}

# Add SSL certificate with Let's Encrypt
add_ssl() {
    local domain=$1
    
    print_info "Adding SSL certificate for $domain..."
    
    if ! command -v certbot > /dev/null 2>&1; then
        print_error "Certbot not found. Installing..."
        apt update && apt install -y certbot python3-certbot-nginx
    fi
    
    # Run certbot
    if certbot --nginx -d "$domain" -d "www.$domain" --non-interactive --agree-tos --email favourland14@gmail.com --redirect; then
        print_success "SSL certificate added successfully for $domain"
    else
        print_error "Failed to add SSL certificate for $domain"
        return 1
    fi
}

# Remove SSL certificate
remove_ssl() {
    local domain=$1
    
    print_info "Removing SSL certificate for $domain..."
    
    if certbot delete --cert-name "$domain" --non-interactive; then
        print_success "SSL certificate removed for $domain"
    else
        print_warning "Could not remove SSL certificate for $domain (may not exist)"
    fi
}

# Renew SSL certificates
renew_ssl() {
    print_info "Renewing all SSL certificates..."
    
    if certbot renew --quiet; then
        print_success "SSL certificates renewed successfully"
        reload_nginx
    else
        print_error "Failed to renew SSL certificates"
        return 1
    fi
}

# Add domain
add_domain() {
    local domain=$1
    
    if ! validate_domain "$domain"; then
        return 1
    fi
    
    # Check if domain already exists
    if [[ -f "$NGINX_SITES_AVAILABLE/$domain" ]]; then
        print_error "Domain $domain already exists"
        return 1
    fi
    
    print_info "Adding domain: $domain"
    
    # Create nginx config
    create_nginx_config "$domain"
    
    # Create web directory
    create_web_directory "$domain"
    
    # Enable site
    ln -sf "$NGINX_SITES_AVAILABLE/$domain" "$NGINX_SITES_ENABLED/$domain"
    
    # Test and reload nginx
    if reload_nginx; then
        print_success "Domain $domain added successfully"
        print_info "You can now access your site at http://$domain"
        print_info "To add SSL, run: domain-manager ssl-add $domain"
    else
        # Cleanup on failure
        rm -f "$NGINX_SITES_ENABLED/$domain"
        rm -f "$NGINX_SITES_AVAILABLE/$domain"
        rm -rf "$WEB_ROOT/$domain"
        print_error "Failed to add domain $domain"
        return 1
    fi
}

# Remove domain
remove_domain() {
    local domain=$1
    local remove_files=$2
    
    if ! validate_domain "$domain"; then
        return 1
    fi
    
    if [[ ! -f "$NGINX_SITES_AVAILABLE/$domain" ]]; then
        print_error "Domain $domain does not exist"
        return 1
    fi
    
    # Confirmation
    echo -n -e "${YELLOW}Are you sure you want to remove domain $domain? [y/N]: ${NC}"
    read -r response
    if [[ ! $response =~ ^[yY] ]]; then
        print_info "Operation cancelled"
        return 0
    fi
    
    print_info "Removing domain: $domain"
    
    # Remove SSL certificate
    remove_ssl "$domain"
    
    # Disable site
    rm -f "$NGINX_SITES_ENABLED/$domain"
    
    # Remove nginx config
    rm -f "$NGINX_SITES_AVAILABLE/$domain"
    
    # Remove web files if requested
    if [[ $remove_files == "true" ]]; then
        echo -n -e "${YELLOW}Remove website files ($WEB_ROOT/$domain)? [y/N]: ${NC}"
        read -r response
        if [[ $response =~ ^[yY] ]]; then
            rm -rf "$WEB_ROOT/$domain"
            print_success "Website files removed"
        fi
    fi
    
    # Reload nginx
    reload_nginx
    
    print_success "Domain $domain removed successfully"
}

# List all domains
list_domains() {
    local webserver=$(detect_webserver)
    
    echo -e "${BLUE}=== Domain List ===${NC}"
    echo "Web Server: $webserver"
    echo ""
    
    if [[ ! -d $NGINX_SITES_AVAILABLE ]]; then
        print_warning "No sites directory found"
        return 1
    fi
    
    printf "%-30s %-10s %-10s %-15s\n" "DOMAIN" "STATUS" "SSL" "DOCUMENT_ROOT"
    printf "%-30s %-10s %-10s %-15s\n" "------" "------" "---" "-------------"
    
    for config in $NGINX_SITES_AVAILABLE/*; do
        if [[ -f $config && $(basename $config) != "default" ]]; then
            local domain=$(basename $config)
            local status="Disabled"
            local ssl="No"
            local doc_root="$WEB_ROOT/$domain"
            
            # Check if enabled
            if [[ -L "$NGINX_SITES_ENABLED/$domain" ]]; then
                status="Enabled"
            fi
            
            # Check SSL
            if grep -q "ssl_certificate" "$config" 2>/dev/null; then
                ssl="Yes"
            fi
            
            printf "%-30s %-10s %-10s %-15s\n" "$domain" "$status" "$ssl" "$doc_root"
        fi
    done
    
    echo ""
    print_info "Total domains: $(find $NGINX_SITES_AVAILABLE -maxdepth 1 -type f ! -name "default" | wc -l)"
}

# Check domain status
check_domain_status() {
    local domain=$1
    
    if ! validate_domain "$domain"; then
        return 1
    fi
    
    echo -e "${BLUE}=== Domain Status: $domain ===${NC}"
    
    # Check if config exists
    if [[ ! -f "$NGINX_SITES_AVAILABLE/$domain" ]]; then
        print_error "Domain $domain not found"
        return 1
    fi
    
    # Basic info
    echo "Configuration file: $NGINX_SITES_AVAILABLE/$domain"
    echo "Document root: $WEB_ROOT/$domain"
    
    # Status
    if [[ -L "$NGINX_SITES_ENABLED/$domain" ]]; then
        print_success "Domain is ENABLED"
    else
        print_warning "Domain is DISABLED"
    fi
    
    # SSL status
    if grep -q "ssl_certificate" "$NGINX_SITES_AVAILABLE/$domain" 2>/dev/null; then
        print_success "SSL certificate is configured"
        
        # Certificate details
        local cert_path=$(grep "ssl_certificate " "$NGINX_SITES_AVAILABLE/$domain" | head -1 | awk '{print $2}' | tr -d ';')
        if [[ -f $cert_path ]]; then
            local cert_expiry=$(openssl x509 -enddate -noout -in "$cert_path" | cut -d= -f2)
            echo "Certificate expires: $cert_expiry"
        fi
    else
        print_warning "No SSL certificate configured"
    fi
    
    # Web directory status
    if [[ -d "$WEB_ROOT/$domain" ]]; then
        local file_count=$(find "$WEB_ROOT/$domain" -type f | wc -l)
        print_success "Web directory exists ($file_count files)"
        
        # Check permissions
        local perms=$(stat -c "%a %U:%G" "$WEB_ROOT/$domain")
        echo "Directory permissions: $perms"
    else
        print_warning "Web directory does not exist"
    fi
    
    # Test HTTP response
    echo ""
    print_info "Testing HTTP response..."
    if curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" "http://$domain" --connect-timeout 5; then
        echo "HTTP test completed"
    else
        print_warning "Could not connect to $domain"
    fi
    
    # Show access logs (last 5 lines)
    if [[ -f "/var/log/nginx/$domain.access.log" ]]; then
        echo ""
        print_info "Recent access log entries:"
        tail -5 "/var/log/nginx/$domain.access.log"
    fi
}

# Enable domain
enable_domain() {
    local domain=$1
    
    if ! validate_domain "$domain"; then
        return 1
    fi
    
    if [[ ! -f "$NGINX_SITES_AVAILABLE/$domain" ]]; then
        print_error "Domain $domain does not exist"
        return 1
    fi
    
    if [[ -L "$NGINX_SITES_ENABLED/$domain" ]]; then
        print_warning "Domain $domain is already enabled"
        return 0
    fi
    
    ln -sf "$NGINX_SITES_AVAILABLE/$domain" "$NGINX_SITES_ENABLED/$domain"
    
    if reload_nginx; then
        print_success "Domain $domain enabled successfully"
    else
        rm -f "$NGINX_SITES_ENABLED/$domain"
        print_error "Failed to enable domain $domain"
        return 1
    fi
}

# Disable domain
disable_domain() {
    local domain=$1
    
    if ! validate_domain "$domain"; then
        return 1
    fi
    
    if [[ ! -L "$NGINX_SITES_ENABLED/$domain" ]]; then
        print_warning "Domain $domain is already disabled"
        return 0
    fi
    
    rm -f "$NGINX_SITES_ENABLED/$domain"
    
    if reload_nginx; then
        print_success "Domain $domain disabled successfully"
    else
        print_error "Failed to disable domain $domain"
        return 1
    fi
}

# Show server information
show_server_info() {
    local webserver=$(detect_webserver)
    
    echo -e "${BLUE}=== Server Information ===${NC}"
    echo "Operating System: $(lsb_release -d | cut -f2)"
    echo "Kernel: $(uname -r)"
    echo "Web Server: $webserver"
    
    if [[ $webserver == "nginx" ]]; then
        echo "Nginx Version: $(nginx -v 2>&1 | cut -d' ' -f3)"
        echo "Nginx Status: $(systemctl is-active nginx)"
    fi
    
    echo ""
    echo "System Resources:"
    echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | sed 's/%Cpu(s)://' | awk '{print $1}' | cut -d'%' -f1 2>/dev/null || echo "N/A")%"
    echo "Memory Usage: $(free -h | awk '/^Mem:/ {print $3"/"$2}')"
    echo "Disk Usage: $(df -h / | awk 'NR==2 {print $3"/"$2" ("$5" used)"}')"
    
    echo ""
    echo "SSL/TLS:"
    if command -v certbot > /dev/null 2>&1; then
        echo "Certbot Version: $(certbot --version | cut -d' ' -f2)"
        echo "Active Certificates: $(certbot certificates 2>/dev/null | grep -c "Certificate Name:" || echo "0")"
    else
        echo "Certbot: Not installed"
    fi
    
    echo ""
    echo "Network:"
    echo "Public IP: $(curl -s --connect-timeout 5 --max-time 10 ifconfig.me || echo "Unable to detect")"
    echo ""
    
    # Show active domains
    local domain_count=$(find $NGINX_SITES_ENABLED -type l | wc -l)
    echo "Active Domains: $domain_count"
    
    if [[ $domain_count -gt 0 ]]; then
        echo "Domain List:"
        for site in $NGINX_SITES_ENABLED/*; do
            if [[ -L $site ]]; then
                echo "  - $(basename $site)"
            fi
        done
    fi
}

# Detect web server for status (non-fatal)
detect_webserver_status() {
    if command -v nginx > /dev/null 2>&1; then
        echo "nginx"
    elif command -v apache2 > /dev/null 2>&1; then
        echo "apache2"
    else
        echo "Not Found"
    fi
}

# Get system status information
get_system_status() {
    local webserver=$(detect_webserver_status)
    local nginx_status="Unknown"
    local domain_count=0
    local ssl_count=0
    local public_ip="Unknown"
    
    # Check web server status
    if [[ $webserver == "nginx" ]]; then
        if systemctl is-active nginx >/dev/null 2>&1; then
            nginx_status="Running"
        else
            nginx_status="Stopped"
        fi
    elif [[ $webserver == "apache2" ]]; then
        if systemctl is-active apache2 >/dev/null 2>&1; then
            nginx_status="Running"
        else
            nginx_status="Stopped"
        fi
    else
        nginx_status="Not Available"
    fi
    
    # Count domains
    if [[ -d $NGINX_SITES_AVAILABLE ]]; then
        domain_count=$(find $NGINX_SITES_AVAILABLE -maxdepth 1 -type f ! -name "default" 2>/dev/null | wc -l)
    fi
    
    # Count SSL certificates
    if command -v certbot >/dev/null 2>&1; then
        ssl_count=$(certbot certificates 2>/dev/null | grep -c "Certificate Name:" 2>/dev/null || echo "0")
    fi
    
    # Get public IP (try multiple services)
    public_ip=$(timeout 5 curl -s ifconfig.me 2>/dev/null || \
                timeout 5 curl -s ipinfo.io/ip 2>/dev/null || \
                timeout 5 curl -s icanhazip.com 2>/dev/null || \
                echo "Unable to detect")
    
    # Clean up the IP (remove any whitespace/newlines)
    public_ip=$(echo "$public_ip" | tr -d '\n\r' | xargs)
    
    # Clean up all variables (remove newlines)
    webserver=$(echo "$webserver" | tr -d '\n\r')
    nginx_status=$(echo "$nginx_status" | tr -d '\n\r')
    domain_count=$(echo "$domain_count" | tr -d '\n\r')
    ssl_count=$(echo "$ssl_count" | tr -d '\n\r')
    public_ip=$(echo "$public_ip" | tr -d '\n\r')
    
    # Return status info
    echo "$webserver|$nginx_status|$domain_count|$ssl_count|$public_ip"
}

# Interactive menu
show_interactive_menu() {
    clear
    
    # Get system status
    local status_info=$(get_system_status)
    IFS='|' read -r webserver nginx_status domain_count ssl_count public_ip <<< "$status_info"
    
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                    Domain Manager v1.0                      ║${NC}"
    echo -e "${BLUE}║                  Interactive Management                     ║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    
    # System Status Display
    echo -e "${BLUE}📊 System Status:${NC}"
    printf "   %-20s %s\n" "Server:" "$webserver ($nginx_status)"
    printf "   %-20s %s\n" "Available Domains:" "$domain_count"
    printf "   %-20s %s\n" "SSL Certificates:" "$ssl_count"
    printf "   %-20s %s\n" "Public IP:" "$public_ip"
    printf "   %-20s %s\n" "Uptime:" "$(uptime -p 2>/dev/null || echo 'Unknown')"
    echo ""
    
    # Menu Options
    echo -e "${BLUE}🚀 Management Options:${NC}"
    echo -e "${GREEN}1.${NC} Add Domain"
    echo -e "${GREEN}2.${NC} Remove Domain"
    echo -e "${GREEN}3.${NC} List All Domains"
    echo -e "${GREEN}4.${NC} Check Domain Status"
    echo -e "${GREEN}5.${NC} Enable Domain"
    echo -e "${GREEN}6.${NC} Disable Domain"
    echo -e "${GREEN}7.${NC} Add SSL Certificate"
    echo -e "${GREEN}8.${NC} Remove SSL Certificate"
    echo -e "${GREEN}9.${NC} Renew SSL Certificates"
    echo -e "${GREEN}10.${NC} Server Information"
    echo -e "${PURPLE}11.${NC} Server Manager (Switch Apache/Nginx)"
    echo -e "${RED}0.${NC} Exit"
    echo ""
    echo -n -e "${YELLOW}Enter your choice [0-11]: ${NC}"
}

# Get domain input with validation
get_domain_input() {
    local prompt="$1"
    local domain
    
    while true; do
        echo -n -e "${YELLOW}$prompt: ${NC}"
        read -r domain
        
        if [[ -z "$domain" ]]; then
            print_error "Domain cannot be empty"
            continue
        fi
        
        if validate_domain "$domain"; then
            echo "$domain"
            return 0
        else
            print_error "Please enter a valid domain name"
        fi
    done
}

# Select domain from existing domains
select_domain() {
    local purpose="$1"
    local domains=()
    local count=0
    
    echo "Available domains for $purpose:" >&2
    echo "" >&2
    
    # Build array of domains
    for config in $NGINX_SITES_AVAILABLE/*; do
        if [[ -f "$config" && "$(basename "$config")" != "default" ]]; then
            local domain=$(basename "$config")
            domains[$count]=$domain
            local status="Disabled"
            
            if [[ -L "$NGINX_SITES_ENABLED/$domain" ]]; then
                status="Enabled"
            fi
            
            echo "$((count + 1)). $domain ($status)" >&2
            ((count++))
        fi
    done
    
    if [[ $count -eq 0 ]]; then
        echo "ERROR: No domains found" >&2
        return 1
    fi
    
    echo "0. Cancel" >&2
    echo "" >&2
    
    while true; do
        echo -n "Select domain [0-$count]: " >&2
        read -r choice < /dev/tty
        
        if [[ "$choice" == "0" ]]; then
            return 1
        elif [[ "$choice" =~ ^[1-9][0-9]*$ ]] && [[ $choice -le $count ]]; then
            echo "${domains[$((choice - 1))]}"
            return 0
        else
            echo "ERROR: Invalid choice. Please enter a number between 0 and $count" >&2
        fi
    done
}

# Interactive mode main loop
run_interactive() {
    while true; do
        show_interactive_menu
        read -r choice < /dev/tty
        
        case $choice in
            1)
                clear
                echo -e "${BLUE}=== Add Domain ===${NC}"
                domain=$(get_domain_input "Enter domain name")
                if [[ $? -eq 0 ]]; then
                    add_domain "$domain"
                    echo ""
                    echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                fi
                ;;
            2)
                clear
                echo -e "${BLUE}=== Remove Domain ===${NC}"
                echo ""
                domain=$(select_domain "removal")
                if [[ $? -eq 0 ]]; then
                    echo ""
                    echo -n -e "${YELLOW}Remove website files too? [y/N]: ${NC}"
                    read -r remove_files < /dev/tty
                    local files_flag="false"
                    if [[ $remove_files =~ ^[yY] ]]; then
                        files_flag="true"
                    fi
                    remove_domain "$domain" "$files_flag"
                    echo ""
                    echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                fi
                ;;
            3)
                clear
                list_domains
                echo ""
                echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                read -r
                ;;
            4)
                clear
                echo -e "${BLUE}=== Domain Status ===${NC}"
                domain=$(select_domain "status check")
                if [[ $? -eq 0 ]]; then
                    echo ""
                    check_domain_status "$domain"
                    echo ""
                    echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                fi
                ;;
            5)
                clear
                echo -e "${BLUE}=== Enable Domain ===${NC}"
                domain=$(select_domain "enabling")
                if [[ $? -eq 0 ]]; then
                    enable_domain "$domain"
                    echo ""
                    echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                fi
                ;;
            6)
                clear
                echo -e "${BLUE}=== Disable Domain ===${NC}"
                domain=$(select_domain "disabling")
                if [[ $? -eq 0 ]]; then
                    disable_domain "$domain"
                    echo ""
                    echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                fi
                ;;
            7)
                clear
                echo -e "${BLUE}=== Add SSL Certificate ===${NC}"
                domain=$(select_domain "SSL addition")
                if [[ $? -eq 0 ]]; then
                    add_ssl "$domain"
                    echo ""
                    echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                fi
                ;;
            8)
                clear
                echo -e "${BLUE}=== Remove SSL Certificate ===${NC}"
                domain=$(select_domain "SSL removal")
                if [[ $? -eq 0 ]]; then
                    remove_ssl "$domain"
                    echo ""
                    echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                fi
                ;;
            9)
                clear
                echo -e "${BLUE}=== Renew SSL Certificates ===${NC}"
                renew_ssl
                echo ""
                echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                read -r
                ;;
            10)
                clear
                show_server_info
                echo ""
                echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                read -r
                ;;
            11)
                clear
                echo -e "${BLUE}=== Launching Server Manager ===${NC}"
                echo ""
                if command -v server-manager >/dev/null 2>&1; then
                    server-manager
                else
                    print_error "Server Manager not found. Please install it first."
                    echo ""
                    echo -n -e "${YELLOW}Press Enter to continue...${NC}"
                    read -r
                fi
                ;;
            0)
                clear
                print_success "Thank you for using Domain Manager!"
                exit 0
                ;;
            *)
                print_error "Invalid choice. Please select 0-11"
                sleep 2
                ;;
        esac
    done
}

# Show usage information
show_usage() {
    echo -e "${BLUE}Domain Manager - VPS Domain Management Tool${NC}"
    echo ""
    echo "Usage: domain-manager [COMMAND] [OPTIONS]"
    echo ""
    echo "Interactive Mode:"
    echo "  domain-manager            Launch interactive interface"
    echo "  domain-manager -i         Launch interactive interface"
    echo ""
    echo "Commands:"
    echo "  add <domain>              Add a new domain"
    echo "  remove <domain>           Remove a domain (keeps web files)"
    echo "  remove <domain> --files   Remove domain and web files"
    echo "  list                      List all configured domains"
    echo "  status <domain>           Show detailed status of a domain"
    echo "  enable <domain>           Enable a domain"
    echo "  disable <domain>          Disable a domain"
    echo "  ssl-add <domain>          Add SSL certificate with Let's Encrypt"
    echo "  ssl-remove <domain>       Remove SSL certificate"
    echo "  ssl-renew                 Renew all SSL certificates"
    echo "  server-info               Show server information"
    echo "  help                      Show this help message"
    echo ""
    echo "Examples:"
    echo "  domain-manager add example.com"
    echo "  domain-manager ssl-add example.com"
    echo "  domain-manager status example.com"
    echo "  domain-manager remove example.com --files"
    echo ""
    echo "For support and documentation, check the log file: $LOG_FILE"
}

# Main script logic
main() {
    # Check if running as root
    check_root
    
    # Create log file if it doesn't exist
    touch "$LOG_FILE"
    
    # Rotate log file if it's larger than 10MB
    if [[ -f "$LOG_FILE" && $(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE" 2>/dev/null) -gt 10485760 ]]; then
        mv "$LOG_FILE" "${LOG_FILE}.old"
        touch "$LOG_FILE"
        print_info "Log file rotated due to size limit"
    fi
    
    # Check if webserver is installed
    local webserver=$(detect_webserver)
    
    case "${1:-}" in
        "add")
            if [[ -z "${2:-}" ]]; then
                print_error "Domain name required"
                echo "Usage: domain-manager add <domain>"
                exit 1
            fi
            add_domain "$2"
            ;;
        "remove")
            if [[ -z "${2:-}" ]]; then
                print_error "Domain name required"
                echo "Usage: domain-manager remove <domain> [--files]"
                exit 1
            fi
            local remove_files="false"
            if [[ "${3:-}" == "--files" ]]; then
                remove_files="true"
            fi
            remove_domain "$2" "$remove_files"
            ;;
        "list")
            list_domains
            ;;
        "status")
            if [[ -z "${2:-}" ]]; then
                print_error "Domain name required"
                echo "Usage: domain-manager status <domain>"
                exit 1
            fi
            check_domain_status "$2"
            ;;
        "enable")
            if [[ -z "${2:-}" ]]; then
                print_error "Domain name required"
                echo "Usage: domain-manager enable <domain>"
                exit 1
            fi
            enable_domain "$2"
            ;;
        "disable")
            if [[ -z "${2:-}" ]]; then
                print_error "Domain name required"
                echo "Usage: domain-manager disable <domain>"
                exit 1
            fi
            disable_domain "$2"
            ;;
        "ssl-add")
            if [[ -z "${2:-}" ]]; then
                print_error "Domain name required"
                echo "Usage: domain-manager ssl-add <domain>"
                exit 1
            fi
            add_ssl "$2"
            ;;
        "ssl-remove")
            if [[ -z "${2:-}" ]]; then
                print_error "Domain name required"
                echo "Usage: domain-manager ssl-remove <domain>"
                exit 1
            fi
            remove_ssl "$2"
            ;;
        "ssl-renew")
            renew_ssl
            ;;
        "server-info")
            show_server_info
            ;;
        "help"|"--help")
            show_usage
            ;;
        "-i"|"--interactive")
            run_interactive
            ;;
        "")
            run_interactive
            ;;
        *)
            print_error "Unknown command: $1"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"